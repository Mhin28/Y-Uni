// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Repositories.Models;

public partial class YUniContext : DbContext
{
    public YUniContext()
    {
    }

    public YUniContext(DbContextOptions<YUniContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Assignment> Assignments { get; set; }

    public virtual DbSet<AuditLog> AuditLogs { get; set; }

    public virtual DbSet<Budget> Budgets { get; set; }

    public virtual DbSet<Discount> Discounts { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<EventCategory> EventCategories { get; set; }

    public virtual DbSet<Expense> Expenses { get; set; }

    public virtual DbSet<ExpensesCategory> ExpensesCategories { get; set; }

    public virtual DbSet<FinancialAccount> FinancialAccounts { get; set; }

    public virtual DbSet<Goal> Goals { get; set; }

    public virtual DbSet<Investment> Investments { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<MembershipPlan> MembershipPlans { get; set; }

    public virtual DbSet<PaymentGateway> PaymentGateways { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<PriorityLevel> PriorityLevels { get; set; }

    public virtual DbSet<Reminder> Reminders { get; set; }

    public virtual DbSet<ReminderTemplate> ReminderTemplates { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Subject> Subjects { get; set; }

    public virtual DbSet<TimeLog> TimeLogs { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Assignment>(entity =>
        {
            entity.HasKey(e => e.AssignmentId).HasName("PK__Assignme__52C21820881B96E1");

            entity.ToTable(tb => tb.HasTrigger("UpdateAssignmentStatus"));

            entity.Property(e => e.AssignmentId)
                .ValueGeneratedNever()
                .HasColumnName("assignmentId");
            entity.Property(e => e.CompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("completedDate");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("dueDate");
            entity.Property(e => e.EstimatedTime).HasColumnName("estimatedTime");
            entity.Property(e => e.PriorityId)
                .HasDefaultValue((byte)3)
                .HasColumnName("priorityId");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("not_started")
                .HasColumnName("status");
            entity.Property(e => e.SubjectId).HasColumnName("subjectId");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.Priority).WithMany(p => p.Assignments)
                .HasForeignKey(d => d.PriorityId)
                .HasConstraintName("FK__Assignmen__prior__6D0D32F4");

            entity.HasOne(d => d.Subject).WithMany(p => p.Assignments)
                .HasForeignKey(d => d.SubjectId)
                .HasConstraintName("FK__Assignmen__subje__6E01572D");

            entity.HasOne(d => d.User).WithMany(p => p.Assignments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Assignmen__userI__6EF57B66");
        });

        modelBuilder.Entity<AuditLog>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK__AuditLog__7839F64D5D8CED60");

            entity.Property(e => e.LogId)
                .ValueGeneratedNever()
                .HasColumnName("logId");
            entity.Property(e => e.ActionTimestamp)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("actionTimestamp");
            entity.Property(e => e.ActionType)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("actionType");
            entity.Property(e => e.NewValues).HasColumnName("newValues");
            entity.Property(e => e.OldValues).HasColumnName("oldValues");
            entity.Property(e => e.RecordId).HasColumnName("recordId");
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tableName");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.User).WithMany(p => p.AuditLogs)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__AuditLogs__userI__36B12243");
        });

        modelBuilder.Entity<Budget>(entity =>
        {
            entity.HasKey(e => e.BudgetId).HasName("PK__Budgets__1E2B71361A22AD1F");

            entity.Property(e => e.BudgetId)
                .ValueGeneratedNever()
                .HasColumnName("budgetId");
            entity.Property(e => e.AccountId).HasColumnName("accountId");
            entity.Property(e => e.BudgetAmount)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("budgetAmount");
            entity.Property(e => e.CategoryId).HasColumnName("categoryId");
            entity.Property(e => e.EndDate).HasColumnName("endDate");
            entity.Property(e => e.StartDate).HasColumnName("startDate");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.Account).WithMany(p => p.Budgets)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Budgets__account__151B244E");

            entity.HasOne(d => d.Category).WithMany(p => p.Budgets)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__Budgets__categor__14270015");

            entity.HasOne(d => d.User).WithMany(p => p.Budgets)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Budgets__userId__160F4887");
        });

        modelBuilder.Entity<Discount>(entity =>
        {
            entity.HasKey(e => e.DiscountId).HasName("PK__Discount__D2130A66537B7445");

            entity.Property(e => e.DiscountId)
                .ValueGeneratedNever()
                .HasColumnName("discountId");
            entity.Property(e => e.DiscountName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("discountName");
            entity.Property(e => e.DiscountPercentage)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("discountPercentage");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("isActive");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.EventId).HasName("PK__Events__2DC7BD09DF5E74B9");

            entity.Property(e => e.EventId)
                .ValueGeneratedNever()
                .HasColumnName("eventId");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.EndDateTime)
                .HasColumnType("datetime")
                .HasColumnName("endDateTime");
            entity.Property(e => e.EvCategoryId).HasColumnName("evCategoryId");
            entity.Property(e => e.RecurrenceEndDate).HasColumnName("recurrenceEndDate");
            entity.Property(e => e.RecurrencePattern)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("none")
                .HasColumnName("recurrencePattern");
            entity.Property(e => e.StartDateTime)
                .HasColumnType("datetime")
                .HasColumnName("startDateTime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.EvCategory).WithMany(p => p.Events)
                .HasForeignKey(d => d.EvCategoryId)
                .HasConstraintName("FK__Events__evCatego__778AC167");

            entity.HasOne(d => d.User).WithMany(p => p.Events)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Events__userId__787EE5A0");
        });

        modelBuilder.Entity<EventCategory>(entity =>
        {
            entity.HasKey(e => e.EvCategoryId).HasName("PK__EventCat__9914124AA3C24B9F");

            entity.HasIndex(e => e.CategoryName, "UQ__EventCat__37077ABD256CFEA4").IsUnique();

            entity.Property(e => e.EvCategoryId)
                .ValueGeneratedNever()
                .HasColumnName("evCategoryId");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("categoryName");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
        });

        modelBuilder.Entity<Expense>(entity =>
        {
            entity.HasKey(e => e.ExpensesId).HasName("PK__Expenses__B3C129D5EFF498AA");

            entity.Property(e => e.ExpensesId)
                .ValueGeneratedNever()
                .HasColumnName("expensesId");
            entity.Property(e => e.AccountId).HasColumnName("accountId");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdDate");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.ExCid).HasColumnName("exCId");
            entity.Property(e => e.Frequency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("once")
                .HasColumnName("frequency");
            entity.Property(e => e.NextDueDate).HasColumnName("nextDueDate");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.Account).WithMany(p => p.Expenses)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Expenses__accoun__4BAC3F29");

            entity.HasOne(d => d.ExC).WithMany(p => p.Expenses)
                .HasForeignKey(d => d.ExCid)
                .HasConstraintName("FK__Expenses__exCId__4AB81AF0");

            entity.HasOne(d => d.User).WithMany(p => p.Expenses)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Expenses__userId__4CA06362");
        });

        modelBuilder.Entity<ExpensesCategory>(entity =>
        {
            entity.HasKey(e => e.ExCid).HasName("PK__Expenses__EC0350FEE4DC75BB");

            entity.HasIndex(e => e.CategoryName, "UQ__Expenses__37077ABDF3245EA1").IsUnique();

            entity.Property(e => e.ExCid)
                .ValueGeneratedNever()
                .HasColumnName("exCId");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("categoryName");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
        });

        modelBuilder.Entity<FinancialAccount>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK__Financia__F267251EB2447156");

            entity.Property(e => e.AccountId)
                .ValueGeneratedNever()
                .HasColumnName("accountId");
            entity.Property(e => e.AccountName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("accountName");
            entity.Property(e => e.Balance)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("balance");
            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("VND")
                .IsFixedLength()
                .HasColumnName("currencyCode");
            entity.Property(e => e.IsDefault)
                .HasDefaultValue(false)
                .HasColumnName("isDefault");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.User).WithMany(p => p.FinancialAccounts)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Financial__userI__403A8C7D");
        });

        modelBuilder.Entity<Goal>(entity =>
        {
            entity.HasKey(e => e.GoalId).HasName("PK__Goals__7E225EB19FD031E1");

            entity.Property(e => e.GoalId)
                .ValueGeneratedNever()
                .HasColumnName("goalId");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.GoalName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("goalName");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("not_started")
                .HasColumnName("status");
            entity.Property(e => e.TargetDate).HasColumnName("targetDate");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.User).WithMany(p => p.Goals)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Goals__userId__0F624AF8");
        });

        modelBuilder.Entity<Investment>(entity =>
        {
            entity.HasKey(e => e.InvestmentId).HasName("PK__Investme__AF6E7CD9FEEEB9D1");

            entity.Property(e => e.InvestmentId)
                .ValueGeneratedNever()
                .HasColumnName("investmentId");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.InterestRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("interestRate");
            entity.Property(e => e.InvestmentDate).HasColumnName("investmentDate");
            entity.Property(e => e.InvestmentName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("investmentName");
            entity.Property(e => e.MaturityDate).HasColumnName("maturityDate");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.User).WithMany(p => p.Investments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Investmen__userI__19DFD96B");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.InvoiceId).HasName("PK__Invoices__1252416C1BAC2558");

            entity.Property(e => e.InvoiceId)
                .ValueGeneratedNever()
                .HasColumnName("invoiceId");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdDate");
            entity.Property(e => e.DiscountAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("discountAmount");
            entity.Property(e => e.DiscountId).HasColumnName("discountId");
            entity.Property(e => e.GatewayTransactionId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("gatewayTransactionId");
            entity.Property(e => e.InvoiceStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("unpaid")
                .HasColumnName("invoiceStatus");
            entity.Property(e => e.MembershipPlanId).HasColumnName("membershipPlanId");
            entity.Property(e => e.PaymentMethodId).HasColumnName("paymentMethodId");
            entity.Property(e => e.TaxAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("taxAmount");
            entity.Property(e => e.TotalAmount)
                .HasComputedColumnSql("(([amount]+[taxAmount])-[discountAmount])", false)
                .HasColumnType("decimal(17, 2)")
                .HasColumnName("totalAmount");
            entity.Property(e => e.UpdatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updatedDate");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.Discount).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.DiscountId)
                .HasConstraintName("FK__Invoices__discou__60A75C0F");

            entity.HasOne(d => d.MembershipPlan).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.MembershipPlanId)
                .HasConstraintName("FK__Invoices__member__619B8048");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.PaymentMethodId)
                .HasConstraintName("FK__Invoices__paymen__5EBF139D");

            entity.HasOne(d => d.User).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Invoices__userId__5FB337D6");
        });

        modelBuilder.Entity<MembershipPlan>(entity =>
        {
            entity.HasKey(e => e.MPid).HasName("PK__Membersh__6EE0AD3BF5795E8B");

            entity.Property(e => e.MPid)
                .ValueGeneratedNever()
                .HasColumnName("mPId");
            entity.Property(e => e.DurationDays).HasColumnName("durationDays");
            entity.Property(e => e.PlanName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("planName");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("price");
        });

        modelBuilder.Entity<PaymentGateway>(entity =>
        {
            entity.HasKey(e => e.GatewayId).HasName("PK__PaymentG__B59884D6AC6BEFE2");

            entity.HasIndex(e => e.GatewayName, "UQ__PaymentG__9025BBE5155C46DC").IsUnique();

            entity.Property(e => e.GatewayId)
                .ValueGeneratedNever()
                .HasColumnName("gatewayId");
            entity.Property(e => e.ApiKey)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("apiKey");
            entity.Property(e => e.GatewayName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("gatewayName");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("isActive");
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.HasKey(e => e.MethodId).HasName("PK__PaymentM__C7B34C89977AC533");

            entity.HasIndex(e => e.MethodName, "UQ__PaymentM__DF66BADDA61444FF").IsUnique();

            entity.Property(e => e.MethodId)
                .ValueGeneratedNever()
                .HasColumnName("methodId");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("isActive");
            entity.Property(e => e.MethodName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("methodName");
        });

        modelBuilder.Entity<PriorityLevel>(entity =>
        {
            entity.HasKey(e => e.PriorityId).HasName("PK__Priority__58E3F01AD652340E");

            entity.HasIndex(e => e.LevelName, "UQ__Priority__06C47A52D3062A01").IsUnique();

            entity.Property(e => e.PriorityId).HasColumnName("priorityId");
            entity.Property(e => e.ColorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("colorCode");
            entity.Property(e => e.LevelName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("levelName");
        });

        modelBuilder.Entity<Reminder>(entity =>
        {
            entity.HasKey(e => e.ReminderId).HasName("PK__Reminder__09DAAAE33A8F436A");

            entity.Property(e => e.ReminderId)
                .ValueGeneratedNever()
                .HasColumnName("reminderId");
            entity.Property(e => e.AssignmentId).HasColumnName("assignmentId");
            entity.Property(e => e.EventId).HasColumnName("eventId");
            entity.Property(e => e.NotificationChannel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("push")
                .HasColumnName("notificationChannel");
            entity.Property(e => e.ReminderTime)
                .HasColumnType("datetime")
                .HasColumnName("reminderTime");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("pending")
                .HasColumnName("status");
            entity.Property(e => e.TemplateId).HasColumnName("templateId");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.Assignment).WithMany(p => p.Reminders)
                .HasForeignKey(d => d.AssignmentId)
                .HasConstraintName("FK__Reminders__assig__02FC7413");

            entity.HasOne(d => d.Event).WithMany(p => p.Reminders)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("FK__Reminders__event__02084FDA");

            entity.HasOne(d => d.Template).WithMany(p => p.Reminders)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK__Reminders__templ__04E4BC85");

            entity.HasOne(d => d.User).WithMany(p => p.Reminders)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Reminders__userI__03F0984C");
        });

        modelBuilder.Entity<ReminderTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId).HasName("PK__Reminder__530F3800326DC0F4");

            entity.Property(e => e.TemplateId)
                .ValueGeneratedNever()
                .HasColumnName("templateId");
            entity.Property(e => e.TemplateName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("templateName");
            entity.Property(e => e.TriggerType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("triggerType");
            entity.Property(e => e.TriggerValue).HasColumnName("triggerValue");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__CD98462A7F3B451D");

            entity.ToTable("Role");

            entity.HasIndex(e => e.RoleName, "UQ__Role__B1947861BCC27CD2").IsUnique();

            entity.Property(e => e.RoleId)
                .ValueGeneratedNever()
                .HasColumnName("roleId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("roleName");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updatedAt");
        });

        modelBuilder.Entity<Subject>(entity =>
        {
            entity.HasKey(e => e.SubjectId).HasName("PK__Subjects__ACF9A7603572ADF0");

            entity.HasIndex(e => e.SubjectName, "UQ__Subjects__E5068BFDC1E424D6").IsUnique();

            entity.Property(e => e.SubjectId)
                .ValueGeneratedNever()
                .HasColumnName("subjectId");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.SubjectName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("subjectName");
        });

        modelBuilder.Entity<TimeLog>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK__TimeLogs__7839F64D1C1B7918");

            entity.Property(e => e.LogId)
                .ValueGeneratedNever()
                .HasColumnName("logId");
            entity.Property(e => e.AssignmentId).HasColumnName("assignmentId");
            entity.Property(e => e.Duration)
                .HasComputedColumnSql("(datediff(minute,[startTime],[endTime]))", false)
                .HasColumnName("duration");
            entity.Property(e => e.EndTime)
                .HasColumnType("datetime")
                .HasColumnName("endTime");
            entity.Property(e => e.EventId).HasColumnName("eventId");
            entity.Property(e => e.StartTime)
                .HasColumnType("datetime")
                .HasColumnName("startTime");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.Assignment).WithMany(p => p.TimeLogs)
                .HasForeignKey(d => d.AssignmentId)
                .HasConstraintName("FK__TimeLogs__assign__08B54D69");

            entity.HasOne(d => d.Event).WithMany(p => p.TimeLogs)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("FK__TimeLogs__eventI__09A971A2");

            entity.HasOne(d => d.User).WithMany(p => p.TimeLogs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TimeLogs__userId__0A9D95DB");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__CB9A1CFFF9BD134F");

            entity.HasIndex(e => e.UserName, "UQ__Users__66DCF95C2BECE0E4").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__Users__AB6E61648F317F6B").IsUnique();

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("userId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fullName");
            entity.Property(e => e.IsVerified)
                .HasDefaultValue(false)
                .HasColumnName("isVerified");
            entity.Property(e => e.LastLogin)
                .HasColumnType("datetime")
                .HasColumnName("lastLogin");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("passwordHash");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updatedAt");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("userName");

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "UserRole",
                    r => r.HasOne<Role>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__UserRoles__roleI__31EC6D26"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__UserRoles__userI__30F848ED"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId").HasName("PK__UserRole__7743989D2B5A1033");
                        j.ToTable("UserRoles");
                        j.IndexerProperty<Guid>("UserId").HasColumnName("userId");
                        j.IndexerProperty<Guid>("RoleId").HasColumnName("roleId");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}